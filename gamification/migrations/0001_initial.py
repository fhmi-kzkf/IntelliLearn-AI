# Generated by Django 5.2.5 on 2025-08-27 07:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(help_text='Font Awesome icon class', max_length=50)),
                ('color', models.CharField(default='#E02424', help_text='Hex color code', max_length=7)),
                ('badge_type', models.CharField(choices=[('completion', 'Course Completion'), ('streak', 'Learning Streak'), ('quiz', 'Quiz Performance'), ('participation', 'Participation'), ('special', 'Special Achievement'), ('milestone', 'Milestone')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('points_value', models.PositiveIntegerField(default=0, help_text='Points awarded when earned')),
                ('requirement_description', models.TextField(help_text='Human-readable requirement description')),
                ('requirement_value', models.PositiveIntegerField(default=1, help_text='Numeric requirement (e.g., courses to complete)')),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until earned')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'badges',
                'ordering': ['badge_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LearningStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('current_streak_start', models.DateField(blank=True, null=True)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak_start', models.DateField(blank=True, null=True)),
                ('longest_streak_end', models.DateField(blank=True, null=True)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('total_active_days', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learning_streak', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Streak',
                'verbose_name_plural': 'Learning Streaks',
                'db_table': 'learning_streaks',
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('spent', 'Points Spent'), ('bonus', 'Bonus Points'), ('penalty', 'Penalty'), ('adjustment', 'Manual Adjustment')], max_length=20)),
                ('source', models.CharField(choices=[('quiz_completion', 'Quiz Completion'), ('course_completion', 'Course Completion'), ('lesson_completion', 'Lesson Completion'), ('streak_bonus', 'Streak Bonus'), ('badge_earned', 'Badge Earned'), ('daily_login', 'Daily Login'), ('admin_adjustment', 'Admin Adjustment')], max_length=30)),
                ('points', models.IntegerField(help_text='Positive for earned, negative for spent')),
                ('description', models.CharField(max_length=200)),
                ('context_object_type', models.CharField(blank=True, max_length=50)),
                ('context_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('balance_after', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Point Transaction',
                'verbose_name_plural': 'Point Transactions',
                'db_table': 'point_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric', models.CharField(choices=[('total_points', 'Total Points'), ('courses_completed', 'Courses Completed'), ('quiz_average', 'Quiz Average Score'), ('current_streak', 'Current Learning Streak'), ('badges_earned', 'Badges Earned')], max_length=30)),
                ('period', models.CharField(choices=[('all_time', 'All Time'), ('monthly', 'This Month'), ('weekly', 'This Week'), ('daily', 'Today')], max_length=20)),
                ('rank', models.PositiveIntegerField()),
                ('value', models.FloatField(help_text='The metric value (points, courses, etc.)')),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Leaderboard Entry',
                'verbose_name_plural': 'Leaderboard Entries',
                'db_table': 'leaderboards',
                'ordering': ['metric', 'period', 'rank'],
                'unique_together': {('user', 'metric', 'period')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('points_awarded', models.PositiveIntegerField(default=0)),
                ('context_object_type', models.CharField(blank=True, help_text='Type of object that triggered the badge', max_length=50)),
                ('context_object_id', models.PositiveIntegerField(blank=True, help_text='ID of object that triggered the badge', null=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='gamification.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'db_table': 'user_badges',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge')},
            },
        ),
    ]
